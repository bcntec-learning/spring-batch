<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

    <batch:job id="notebooksImportJob" xmlns="http://www.springframework.org/schema/batch">

        <step id="notebooksImportStep" next="exportTxt">
            <tasklet>
                <chunk reader="productReader"
                       writer="productsDBItemWriter"
                       processor="productProcess"
                       commit-interval="3" skip-limit="5">
                    <skippable-exception-classes>
                        <include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </skippable-exception-classes>
                </chunk>
            </tasklet>
        </step>
        <step id="exportTxt">
            <tasklet>
                <chunk reader="productsDBItemReader"
                       writer="productsTxtWriter"
                       commit-interval="10">
                </chunk>
            </tasklet>
        </step>

    </batch:job>


    <batch:job id="phoneImportJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="decompressPhonesStep" next="phoneImportStep">
            <tasklet ref="decompressTasklet"/>
        </step>
        <step id="phoneImportStep">
            <tasklet>
                <chunk reader="phoneReader"
                       writer="productEnhhancedJDBCWirter"
                       commit-interval="2">
                </chunk>
            </tasklet>
        </step>

    </batch:job>


    <bean id="decompressTasklet" class="houseware.learn.spring.springbatch.case03.UnzipTasklet" scope="step">
        <property name="inputResource" value="#{jobParameters['inputResource']}"/>
        <property name="targetDirectory" value="#{jobParameters['targetDirectory']}"/>
        <property name="targetFile" value="#{jobParameters['targetFile']}"/>
    </bean>

    <bean id="productProcess" class="houseware.learn.spring.springbatch.case03.ProductProcess"/>

    <bean id="phoneReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="file:#{jobParameters['targetDirectory']+jobParameters['targetFile']}"/>
        <property name="linesToSkip" value="1"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="PHONE_ID,NAME,DESCRIPTION,PRICE"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="houseware.learn.spring.springbatch.case03.PhoneFieldSetMapper"/>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="productReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="#{jobParameters['file']}"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
                        <property name="names" value="ID,TYPE,NAME,PRICE"/>
                        <property name="columns" value="1-9, 10-20, 21-70, 71-80"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="houseware.learn.spring.springbatch.case03.ProductFieldSetMapper"/>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="productsTxtWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">

        <property name="resource" value="file:target/export.txt"/>
        <property name="lineAggregator" ref="passThroughLineAggregator"/>
        <!--<property name="headerCallback" ref="headerCallback"/>-->
        <!--<property name="footerCallback" ref="footerCallback"/>-->
    </bean>

    <bean id="passThroughLineAggregator"
          class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>


    <bean id="productsDBItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql"
                  value="insert into products (id,type,name,description,price) values(:id,:type,:name,:description,:price)"/>


        <property name="itemSqlParameterSourceProvider">

            <bean
                    class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>

    <bean id="productsDBItemReader"
          class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql"
                  value="select id,type,name,description,price from  products order by id"/>

        <property name="rowMapper">
            <bean class="houseware.learn.spring.springbatch.case03.ProductRowMapper"/>
        </property>
    </bean>


    <bean id="productEnhhancedJDBCWirter" class="houseware.learn.spring.springbatch.case03.EnhancedProductJdbcItemWriter">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

</beans>