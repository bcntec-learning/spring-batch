<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

    <batch:job id="notebooksImportJob" >

        <batch:step id="notebooksImportJobStep1" parent="notebooksImportStep" next="notebooksImportJobStep2"/>
        <batch:step id="notebooksImportJobStep2" parent="exportProductsTxt" next="notebooksImportJobStep3"/>
        <batch:step id="notebooksImportJobStep3" parent="exportProductsCsv"/>

    </batch:job>



    <batch:step id="notebooksImportStep" >
        <tasklet>
            <chunk reader="productReader"
                   writer="productsDBItemWriter"
                   processor="productProcess"
                   commit-interval="3" skip-limit="5">
                <skippable-exception-classes>
                    <include class="org.springframework.batch.item.file.FlatFileParseException"/>
                </skippable-exception-classes>
            </chunk>
        </tasklet>
    </batch:step>
    <batch:step id="exportProductsCsv">
        <tasklet>
            <chunk reader="productsDBItemReader"
                   writer="productsCsvWriter"
                   commit-interval="10">
            </chunk>
        </tasklet>
    </batch:step>
    <batch:step id="exportProductsTxt">
        <tasklet>
            <chunk reader="productsDBItemReader"
                   writer="productsTxtWriter"
                   commit-interval="10">
            </chunk>
        </tasklet>
    </batch:step>


    <batch:job id="phoneImportJob">

        <batch:step id="phoneImportJobStep1" parent="decompressPhonesStep" next="phoneImportJobStep2"/>
        <batch:step id="phoneImportJobStep2" parent="phoneImportStep"/>
    </batch:job>

    <batch:job id="productJSONImport">

        <batch:step id="productJSONImportStep1" parent="productJSONImportStep"/>

    </batch:job>


    <batch:step id="decompressPhonesStep">
        <batch:tasklet ref="decompressTasklet"/>
    </batch:step>
    <batch:step id="phoneImportStep">
        <batch:tasklet>
            <batch:chunk reader="phoneReader"
                         writer="productEnhhancedJDBCWirter"
                         commit-interval="2">
            </batch:chunk>
        </batch:tasklet>
    </batch:step>


    <batch:step id="productJSONImportStep">
        <batch:tasklet>
            <batch:chunk reader="productJSONItemReader"
                         writer="productsDBItemWriter"
                         commit-interval="3">
            </batch:chunk>
        </batch:tasklet>
    </batch:step>


    <batch:job id="productXMLImport">
        <batch:step id="productXMLImportStep1" parent="productXMLImportStep"/>
    </batch:job>


    <batch:step id="productXMLImportStep">
        <batch:tasklet>
            <batch:chunk reader="productXMLItemReader"
                         writer="productsDBItemWriter"
                         commit-interval="3">
            </batch:chunk>
        </batch:tasklet>
    </batch:step>


    <bean id="productJSONItemReader"
          class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:/houseware/learn/spring/batch/case03/data/products.json"/>
        <property name="recordSeparatorPolicy"
                  ref="productJSONRecordSeparatorPolicy"/>
        <property name="lineMapper" ref="productJSONLineMapper"/>
    </bean>

    <bean id="productJSONRecordSeparatorPolicy"
          class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

    <bean id="productJSONLineMapper"
          class="houseware.learn.spring.batch.case03.ProductJsonLineMapper">
        <property name="delegate" ref="targetJSONProductsLineMapper"/>
    </bean>

    <bean id="targetJSONProductsLineMapper"
          class="org.springframework.batch.item.file.mapping.JsonLineMapper"/>


    <bean id="productXMLItemReader"
          class="org.springframework.batch.item.xml.StaxEventItemReader">
        <property name="resource" value="classpath:/houseware/learn/spring/batch/case03/data/products.xml"/>
        <property name="fragmentRootElementName" value="product"/>
        <property name="unmarshaller" ref="productXMLMarshaller"/>
    </bean>

    <bean id="productXMLMarshaller"
          class="org.springframework.oxm.castor.CastorMarshaller">
        <property name="mappingLocation"
                  value="classpath:/houseware/learn/spring/batch/case03/mapping.xml"/>
    </bean>


    <bean id="decompressTasklet" class="houseware.learn.spring.batch.case03.UnzipTasklet" scope="step">
        <property name="inputResource" value="#{jobParameters['inputResource']}"/>
        <property name="targetDirectory" value="#{jobParameters['targetDirectory']}"/>
        <property name="targetFile" value="#{jobParameters['targetFile']}"/>
    </bean>

    <bean id="productProcess" class="houseware.learn.spring.batch.case03.ProductProcess"/>

    <bean id="phoneReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="file:#{jobParameters['targetDirectory']+jobParameters['targetFile']}"/>
        <property name="linesToSkip" value="1"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="PHONE_ID,NAME,DESCRIPTION,PRICE"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="houseware.learn.spring.batch.case03.PhoneFieldSetMapper"/>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="productReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="#{jobParameters['file']}"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
                        <property name="names" value="ID,TYPE,NAME,PRICE"/>
                        <property name="columns" value="1-9, 10-20, 21-70, 71-80"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="houseware.learn.spring.batch.case03.ProductFieldSetMapper"/>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="productsTxtWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:target/export-#{jobParameters['timestamp']}.txt"/>
        <property name="lineAggregator" ref="passThroughLineAggregator"/>
        <property name="headerCallback"><bean class="houseware.learn.spring.batch.case03.ProductHeaderCallback"/></property>
    </bean>

    <bean id="passThroughLineAggregator"
          class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>



    <bean id="productsCsvWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:target/export-#{jobParameters['timestamp']}.csv"/>
        <property name="lineAggregator" >
        	<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
        		<property name="delimiter" value=";"/>
        		<property name="fieldExtractor">
        		<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
					<property name="names" value="id,name,type,description,price" />
				</bean>
        		
                <!--    <bean class="houseware.learn.spring.batch.case03.ProductFieldExtractor"/> --> 
        		</property>
        	</bean>
        
        </property>
    </bean>

    



    <bean id="productsDBItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql"
                  value="insert into products (id,type,name,description,price) values(:id,:type,:name,:description,:price)"/>


        <property name="itemSqlParameterSourceProvider">

            <bean
                    class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>

    <bean id="productsDBItemReader"
          class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql"
                  value="select id,type,name,description,price from  products order by id"/>

        <property name="rowMapper">
            <bean class="houseware.learn.spring.batch.case03.ProductRowMapper"/>
        </property>
    </bean>


    <bean id="productEnhhancedJDBCWirter"
          class="houseware.learn.spring.batch.case03.EnhancedProductJdbcItemWriter">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>






    <batch:job id="discriminatorJob" >
        <batch:step id="discriminatorStep">
            <batch:tasklet>
                <batch:chunk reader="discriminatorReader"
                             writer="discriminatorWriter"
                             processor="discriminatorProcessor"
                             commit-interval="3">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>





    <bean id="discriminatorReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">

        <property name="resource" value="#{jobParameters['resource']}"/>

        <property name="lineMapper">
            <bean class=" houseware.learn.spring.batch.case03.SpecialLineMapper">
                <property name="tokenizers">
                    <map>
                        <entry key="01,*" value-ref="itemLineTokenizer" />
                        <entry key="99,*" value-ref="itemTotalTokenizerFin" />
                    </map>
                </property>
                <property name="fieldSetMappers">
                    <map>
                        <entry key="01,*" value-ref="itemLineFieldSetMapper" />
                        <entry key="99,*" value-ref="itemTotalFieldSetMapper" />
                    </map>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="itemLineTokenizer"
          class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="names"
                  value="dc,account,invoice,date" />
    </bean>

    <bean id="itemTotalTokenizerFin"
          class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="names" value="dc,total" />
    </bean>
    <bean id="itemLineFieldSetMapper" class="houseware.learn.spring.batch.case03.ItemLineFieldSetMapper"/>
    <bean id="itemTotalFieldSetMapper" class="houseware.learn.spring.batch.case03.ItemTotalFieldSetMapper"/>


    <bean id="discriminatorProcessor" class="houseware.learn.spring.batch.case03.DiscriminatorItemProcessor"/>
    <bean id="discriminatorWriter" class="houseware.learn.spring.batch.case03.DiscriminatorItemWriter"/>



</beans>